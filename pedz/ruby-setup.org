#+PROPERTY: header-args:emacs-lisp :comments link :tangle yes
#+STRTUP: content
#+TITLE:  Emacs Ruby setup
#+AUTHOR: Perry Smith
#+EMAIL:  pedz@easesoftware.com

* Set up enh-ruby-mode

My belief is that the way ~leaf~ works is it does not actually check
to see if anything is available because I am not adding ~:ensure~ nor
~:require~ in most stanzas.  So, if I decide to remove a package or a
package is not available I want the init process to complete.  Perhaps
give me a warning message that =foo package is not available=.

~borg~ sets the load-path as well as loading any autoloads so I can
check the presence of a package by asking if symbols are bound.

#+begin_src emacs-lisp
  (leaf enh-ruby-mode
    :mode "\\(?:\\.rb\\|ru\\|rake\\|thor\\|jbuilder\\|gemspec\\|podspec\\|/\\(?:Gem\\|Rake\\|Cap\\|Thor\\|Vagrant\\|Guard\\|Pod\\)file\\)\\'"
    :interpreter "ruby")
#+end_src

** company-inf-ruby

[[https://github.com/company-mode/company-inf-ruby/tree/9c2eab3bb82e8838c54013026e6ffb51cccbd37e][company-inf-ruby]] allows company-mode completion back-end for inf-ruby
buffers.

#+begin_src emacs-lisp
  (leaf company-inf-ruby
    :after company
    :defvar company-backends
    :defun company-inf-ruby
    :defer-config
    (add-to-list 'company-backends #'company-inf-ruby))
#+end_src

* Set up rbenv

[[https://github.com/senny/rbenv.el][rbenv]] causes Emacs to use the correct version of Ruby.

#+begin_src emacs-lisp
  (leaf rbenv
    :custom
    (rbenv-installation-dir . "~/.config/rbenv")
    :hook (enh-ruby-mode-hook . global-rbenv-mode))
#+end_src

* Rubocop-mode

[[https://github.com/rubocop/rubocop-emacs][Rubocop]] pesters you to write nice beautiful code.

#+begin_src emacs-lisp
  (leaf rubocop
    :bind (:rubocop-mode-map ("s-c" . rubocop-command-map)))
#+end_src

* rspec-mode

Currently I have rspec-mode enabled via .dir-locals.el so there is
nothing to do but just as a placeholder:

#+begin_src emacs-lisp
  (leaf rspec-mode
    :custom
    (rspec-use-rake-flag . nil)
    (rspec-use-rake-when-possible . nil))
#+end_src

* yari

[[https://github.com/hron/yari.el/tree/a2cb9656ee5dfe1fc2ee3854f3079a1c8e85dbe9][yari]] stands for "Yet Another Ruby Interactive Reference

#+begin_src emacs-lisp
  (leaf yari
    :require t
    :bind (:global-map ("s-y" . yari))
    :defvar yari-mode-hook
    ;; I think I don't need the defer-config anymore
    :defer-config
    (add-to-list 'yari-mode-hook #'hack-dir-local-variables-non-file-buffer))
#+end_src

*  web-mode

[[https://github.com/fxbois/web-mode/tree/4b8a695825fda366927894e498421f35fce1cbb9][web-mode]] is a major mode for editing web templates

#+begin_src emacs-lisp
  (leaf web-mode
    :mode "\\.erb\\'")
#+end_src

* Provide ruby-setup

#+begin_src emacs-lisp
  (provide 'ruby-setup)
#+end_src
